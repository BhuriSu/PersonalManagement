name: "CI Pipeline"

# This CI workflow triggers on new PR or push on main branch.
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    # Testing project
    name: "Test"
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file from GitHub Secrets
        run: |
          echo 'SECRET_KEY=${{ secrets.SECRET_KEY }}' >> .env
          echo 'IS_DEV=${{ secrets.IS_DEV }}' >> .env
          echo 'DEV_DB_NAME=${{ secrets.DEV_DB_NAME }}' >> .env
          echo 'DEV_DB_USER=${{ secrets.DEV_DB_USER }}' >> .env
          echo 'DEV_DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}' >> .env
          echo 'DEV_DB_HOST=${{ secrets.DEV_DB_HOST }}' >> .env
          echo 'DEV_DB_PORT=${{ secrets.DEV_DB_PORT }}' >> .env

      - name: Build and bring up services
        run: |
          docker compose -f docker-compose.yaml up -d --build
      - name: Print Docker logs for django_gunicorn
        run: |
          docker compose -f docker-compose.yaml logs django_gunicorn

      # Unit Test
      - name: Run tests with pytest
        run: |
          docker compose -f docker-compose.yaml exec django_gunicorn pytest

      # Lint Test
      - name: Run Linting
        run: |
          docker compose -f docker-compose.yaml exec django_gunicorn flake8 .

  # GitHub Security Scanning using CodeQL.This checks security vulnerabilities
  security_scan:
    name: "Security Scanning"
    runs-on: ubuntu-latest
    permissions:
      actions: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  